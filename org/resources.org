***** JavaScript and CSS for Lensor Radii Website

It is recommended to use [[file:c:/Emacs/2022/lensor_site/publish.el][the publish script]], but resources can also be generated manually.

First, from Emacs, open this file in org-mode, then detangle
using org-babel with ~M-x org-babel-tangle RET~, or ~C-c C-v t~.

This will generate the corresponding files in ~css~ and ~js~ subdirectories.

#+begin_src emacs-lisp :dir . :results none
  (org-babel-tangle-file (buffer-name))
#+end_src

-----

* Javascript

** Dark-mode toggle

Toggle a dark-mode CSS class for the entire page

Cookies are very handy, simply tools. Basically a client-side config file per-user, per-site. I wonder how many cookies have been sent over HTTPS, ever? Either way, it would be useful for users if the site remembered dark mode, so I've done that.

#+begin_src js :mkdirp yes :tangle js/main.js
  function toggle_dark_mode() {
      var element = document.getElementsByTagName("html")[0];
      var dark_button = document.getElementById("dark-mode");
      element.classList.toggle("dark-mode");
      const d = new Date();
      d.setTime(d.getTime() + (28*24*60*60*1000))
      if (element.classList.contains("dark-mode")) {
          document.cookie = "dark_mode=true; expires=" + d.toUTCString() + "; path=/";
          dark_button.innerHTML = "Light Mode";
      } else {
          document.cookie = "dark_mode=false; expires=" + d.toUTCString() + "; path=/";
          dark_button.innerHTML = "Dark Mode";
      }
  }
#+end_src

** Insert top-of-page banner

This doesn't have to be done programatically at all,
but I like handling it this way for some reason.

#+begin_src js :mkdirp yes :tangle js/main.js
  function insert_top_banner() {
      var new_html = "<nav class=\"navbar\" id=\"navbar\">";
      new_html += "<label for=\"hamburger\">&#9776;</label>";
      new_html += "<input type=\"checkbox\" id=\"hamburger\"/>";
      new_html += "<div id=\"hamburger-items\">";

      new_html += "<a href='/lensr_blog_v1/'\">Home</a>";
      new_html += "<a target=\"_blank\" href='https://www.paypal.com/donate/?hosted_button_id=62KQ4GX6HFTNG'\">Donate</a>";
      new_html += "<a target=\"_blank\" href='https://www.youtube.com/@Lensr'\">YouTube</a>";
      new_html += "<a target=\"_blank\" href='https://www.twitch.tv/lens_r'\">Twitch</a>";
      new_html += "<a target=\"_blank\" href='https://www.github.com/LensPlaysGames'\">GitHub</a>";
      new_html += "<a target=\"_blank\" href='https://discord.gg/FTQsgqQEM4'\">Discord</a>";
      new_html += "<a id=\"dark-mode\" onClick={toggle_dark_mode();}>Dark Mode</a>";

      new_html += "</div></nav>";
      let old_html = "<div class=\"main-body\" id=\"main-body\">"
          + document.body.innerHTML
          + "</div>";
      document.body.innerHTML = new_html + old_html;
  }
#+end_src

** Main

Everything has to start somewhere, right? Might as well copy the well-known convention of a main function being the entry point.

#+begin_src js :mkdirp yes :tangle js/main.js
  function main() {
      // Insert the Navbar.
      insert_top_banner();
      // Custom collapsible sections.
      //setup_collapsibles();
      // Toggle dark mode if cookie is present with true value.
      let cookies = decodeURIComponent(document.cookie).split(';');
      for(let i = 0; i < cookies.length; i++) {
          while (cookies[i].charAt(0) == ' ') {
              cookies[i].substring(1);
          }
          if (cookies[i].indexOf("dark_mode") == 0) {
              let cookie_value = cookies[i]
                  .substring(name.length, cookies[i].length)
                  .split('=')[1];
              if (cookie_value == "true") {
                  toggle_dark_mode();
              }
          }
      }
      // Add #top link to table of contents
      /*let toc_text = document.getElementById("text-table-of-contents");
      if (toc_text) {
          let to_top_ul = document.createElement("ul");
          let to_top_li = document.createElement("li");
          let link_top = document.createElement("a");
          link_top.appendChild(document.createTextNode("Top"));
          link_top.title = "Top of page";
          link_top.href = "#top";
          to_top_li.appendChild(link_top);
          to_top_ul.appendChild(to_top_li);
          toc_text.prepend(to_top_ul);
      }*/
  }

  /* Attach main() function to run when window is loaded (page is rendered). */
  window.onload = main;
#+end_src


* CSS

Style, pizass, umph, whatever you want to call it, we need it.

** Dark mode

A class that is simply attached at the highest level
in a document to switch to a dark color theme.

#+begin_src css :mkdirp yes :tangle css/style.css
  .dark-mode {
      color: #fff;
      background-color: #161718;
  }

  .dark-mode a {
      color: #33ccee;
  }

  .dark-mode a:visited {
      color: #9f85ff;
  }
#+end_src

** Navigation Bar at Top of Site

#+begin_src css :mkdirp yes :tangle css/style.css
  #navbar {
      width: 100%;
      height: 100%;
      vertical-align: middle;
      margin: 0;
      padding: 0;
      color: #161718;
      background-color: #fff;
      border-bottom: .2ex solid gray;
  }

  .dark-mode #navbar {
      color: #fff;
      background: #161718;
  }

  #navbar a {
      height: max(5ex, 4vmin);
      font-size: max(1.8vh, 12pt);
  }

  #navbar a:hover {
      color: #fff;
      background-color: #000;
      transition: color 0.7s;
      cursor: pointer; /* Some navbar anchors don't have an href */
  }

  .dark-mode #navbar a:hover {
      color: #000;
      background-color: #fff;
  }

  #navbar + header > h1 {
      margin-top: 0;
  }

  #navbar + h1 {
      margin-top: 0;
  }
#+end_src

*** Responsive Hamburger menu

This allows the site to not look as amateur on smaller devices, like phones.

Thanks to [[https://code-boxx.com/simple-responsive-pure-css-hamburger-menu/][this guide]].

#+begin_src css :mkdirp yes :tangle css/style.css
  #navbar label, #hamburger {
      font-size: max(8vw, 12pt);
      margin: 0.2em;
      display: none;
  }

  #hamburger-items {
      max-width: 60%;
      display: flex;
  }


  #hamburger-items a {
      display: block;
      overflow: hidden;

      color: #161718;
      background-color: inherit;
      border: none;

      height: max(5ex, 4vmin);
      line-height: max(5ex, 4vmin);

      min-width: 4em;
      width: min-content;
      max-width: 8vw;

      flex-grow: 1;
      flex-basis: 0;

      text-decoration: none;
      text-align: center;
      white-space: nowrap;

      font-size: max(1.8vh, 12pt);
  }

  .dark-mode #hamburger-items a {
      color: #fff;
  }

  @media only screen and (max-width: 1366px) {
      #hamburger-items {
          max-width: 100%;
      }
      #hamburger-items a {
          max-width: none;
      }
  }

  @media only screen and (max-width: 600px) {
      #hamburger-items {
          max-width: 100%;
      }

      #hamburger-items a {
          box-sizing: border-box;
          display: block;
          width: 100%;
          max-width: none;
          border-top: 1px solid #333;
      }

      #navbar label {
          display: inline-block;
      }
      #navbar input:checked ~ #hamburger-items { display: block; }
      #navbar input:checked ~ #hamburger-items a {
          height: max(7ex, 6vmin); /* height: max(5ex, 4vmin); */
          line-height: max(7ex, 6vmin); /* line-height: max(5ex, 4vmin); */
          font-size: max(2.12vh, 14pt); /* font-size: max(1.8vh, 12pt); */
      }
      #hamburger-items { display: none; }
  }
#+end_src

** Tag Overrides

Because the HTML is generated by Pandoc, and I'm
not yet in the mood to learn Haskell and develop a writer,
there aren't really many custom classes to style other
than what is added programatically with JS.

For now, this also contains the websites responsiveness to resizing;
in the future I imagine there will be different CSS files produces
for different media queries.

TODO: I don't even know if this is possible, but if we could somehow
insert the result of getting the foreground color of the font-lock-*
faces, the syntax highlighting would automatically match your Emacs
setup :eyes:.

#+begin_src css :mkdirp yes :tangle css/style.css
  html {
      font-family: sans-serif;
      font-size: max(2.4vh, 8pt);
      color: #161a1f;
      background-color: #ffffff;
      margin: 0 auto;
      transition:         none;
      -moz-transition:    none;
      -o-transition:      none;
      -webkit-transition: none;
      -ms-text-size-adjust:     100%;
      -webkit-text-size-adjust: 100%;
  }

  body {
      margin: 0;
      padding: 0;
  }

  div {
      padding: 0;
      margin: 0;
  }

  h1 {
      margin-top: 0.6rem;
      margin-bottom: 0.6rem;
  }

  h2 {
      margin-top: 0.5rem;
      margin-bottom: 0.5rem;
  }

  h3 {
      margin-top: 0.4rem;
      margin-bottom: 0.4rem;
  }

  h4 {
      margin-top: 0.36rem;
      margin-bottom: 0.36rem;
  }

  h5 {
      margin-top: 0.33rem;
      margin-bottom: 0.33rem;
  }

  h6 {
      margin-top: 0.3rem;
      margin-bottom: 0.3rem;
  }

  a {
      text-decoration: none;
  }

  a:hover {
      text-decoration: underline;
  }

  .small {
      font-size: max(1.6vh, 6pt);
      color: #2a2e33;
  }

  .dark-mode .small {
      color: #716f70;
  }

  .org-src-container {
      color: #1a1b1c;
      background-color: #e4ebe8;

      border: 2px solid #444;
      border-radius: 4px;
      margin: 1vw;
      padding-left: 1vw;
      padding-right: 1vw;
      /* Hide horizontal overflow, add scroll-bar */
      overflow-x: auto;
  }

  .dark-mode .org-src-container {
      color: #e4ebe8;
      background-color: #1a1b1c;

      border-color: #bbb;
  }

  .src {
      font-size: max(1.95vh, 8pt);
  }

  pre.example {
      border: 2px solid #444;
      border-radius: 4px;
      margin: 1vw;
      padding: 1vw;
      /* Hide horizontal overflow, add scroll-bar */
      overflow-x: auto;
  }

  .dark-mode .org-builtin,.dark-mode .org-keyword {
      color: #dd64f4;
  }

  .dark-mode .org-function-name {
      color: #ffebbb;
  }

  .dark-mode .org-type {
      color: #2cabff;
  }

  .dark-mode .org-string {
      color: #ffee20;
  }

  .dark-mode .org-comment-delimiter,.org-comment {
      color: #7f8388;
  }

  .dark-mode code span.co {
      color: #308093;
  }

  .dark-mode code span.fu {
      color: #2963f5
  }

  .org-function-name {
      color: #c26d3b;
  }

  .org-builtin,.org-keyword {
      color: #6f42c1;
  }

  .org-type {
      color: #007bff;
  }

  .org-string {
      color: #dc3545;
  }

  .org-comment-delimiter,.org-comment {
      color: #444343;
  }

  code span.co {
      color: #308093;
  }

  code span.fu {
      color: #007bff
  }

  button {
      height: 100%;
      color: inherit;
      background-color: inherit;
      border: none;
  }

  .title {
      margin-top: 0;
      text-align: center;
  }

  .content {
      margin: 0;
  }

  .author {
      text-align: center;
  }

  .postamble {
      font-size: max(1.2vh, 6pt);
  }

  .main-body {
      margin-left: 26vw;
      margin-right: 26vw;
  }

  @media only screen and (max-width: 1920px) {
      html {
          font-size: max(2.12vh, 8pt);
      }

      .src {
          font-size: max(1.8vh, 8pt);
      }

      .main-body {
          margin-left: 22vw;
          margin-right: 22vw;
      }
  }

  @media only screen and (max-width: 1366px) {
      html {
          font-size: max(1.95vh, 8pt);
      }

      .src {
          font-size: max(1.6vh, 8pt);
      }

      .main-body {
          margin-left: 18vw;
          margin-right: 18vw;
      }
  }

  @media only screen and (max-width: 800px) {
      .org-src-container {
          border-radius: 6px;
      }

      html {
          font-size: max(1.8vh, 8pt);
      }

      .src {
          font-size: max(1.6vh, 8pt);
      }

      .main-body {
          margin-left: 14vw;
          margin-right: 14vw;
      }
  }

  @media only screen and (max-width: 600px) {
      .org-src-container {
          border-radius: 8px;
      }

      html {
          font-size: max(2.4vh, 8pt);
      }

      .src {
          font-size: max(1.8vh, 8pt);
      }

      .main-body {
          margin-left: 8vw;
          margin-right: 8vw;
      }
  }

  @media only screen and (max-width: 256px) {
      .org-src-container {
          border-radius: 6px;
      }

      html {
          font-size: max(1.95vh, 8pt);
      }

      .src {
          font-size: max(1.6vh, 8pt);
      }

      .main-body {
          margin-left: 4vw;
          margin-right: 4vw;
      }
  }
#+end_src


